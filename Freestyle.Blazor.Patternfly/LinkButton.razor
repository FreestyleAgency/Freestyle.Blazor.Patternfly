<a href="@Href" class="pf-c-button @CssClassConstants.GetButtonStyleClass(ButtonStyle) @(Block ? CssClassConstants.Block : String.Empty) @(Enabled ? String.Empty : CssClassConstants.Disabled) @(Size == ButtonSize.Large ? CssClassConstants.DisplayLarge : String.Empty) @(Size == ButtonSize.Small ? CssClassConstants.Small : String.Empty)" @attributes="Attributes" aria-disabled="@(!Enabled)" tabindex="@(Enabled ? (int?)null : -1)">
	@if (!String.IsNullOrEmpty(IconCssClass) && IconPosition == LeftRightHorizontalAlignment.Left)
	{
		if (ButtonStyle != ButtonStyle.Control)
		{
			<span class="pf-c-button__icon">
				<i class="@IconCssClass" aria-hidden="true"></i>
			</span>
		}
		else
		{
			<i class="@IconCssClass" aria-hidden="true"></i>
		}
	}
	@Text
	@if (!String.IsNullOrEmpty(IconCssClass) && IconPosition == LeftRightHorizontalAlignment.Right)
	{
		if (ButtonStyle != ButtonStyle.Control)
		{
			<span class="pf-c-button__icon">
				<i class="@IconCssClass" aria-hidden="true"></i>
			</span>
		}
		else
		{
			<i class="@IconCssClass" aria-hidden="true"></i>
		}
	}
</a>

@code {
	[Parameter]
	public ButtonStyle ButtonStyle { get; set; } = ButtonStyle.Primary;

	[Parameter]
	public string Href { get; set; }

	[Parameter]
	public string Text { get; set; }

	[Parameter]
	public string IconCssClass { get; set; }

	[Parameter]
	public LeftRightHorizontalAlignment IconPosition { get; set; } = LeftRightHorizontalAlignment.Left;

	[Parameter]
	public bool Enabled { get; set; } = true;

	[Parameter]
	public bool Block { get; set; }

	[Parameter]
	public ButtonSize Size { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object> Attributes { get; set; }
}
