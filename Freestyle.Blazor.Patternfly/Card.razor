<div class="pf-c-card @(Compact ? CssClassConstants.Compact : String.Empty) @(Hoverable ? CssClassConstants.Hoverable : String.Empty) @(Selectable ? CssClassConstants.Selectable : String.Empty)  @(Selectable && Selected ? CssClassConstants.Selected : String.Empty) @(Flat ? CssClassConstants.Flat : String.Empty) @(Expandable && Expanded ? CssClassConstants.Expanded : String.Empty)" @attributes="AdditionalAttributes">
	@if (Header != null || Actions != null || (TitleInHeader && Title != null) || Expandable)
	{
		<div class="pf-c-card__header">
			@if (Expandable)
			{
				<div class="pf-c-card__header-toggle">
					<button class="pf-c-button pf-m-plain" type="button" aria-label="Details" id="@id-toggle" aria-labelledby="@id-title @id-toggle" @onclick="ToggleExpanded">
						<span class="pf-c-card__header-toggle-icon">
							<i class="fas fa-angle-right" aria-hidden="true"></i>
						</span>
					</button>
				</div>
			}
			@if (Header != null)
			{
				<div class="pf-c-card__header-main">
					@Header
				</div>
			}
			@if (Actions != null)
			{
				<div class="pf-c-card__actions">
					@Actions
				</div>
			}
			@if (Title != null && TitleInHeader)
			{
				<div class="pf-c-card__title" id="@id-title">@Title</div>
			}
		</div>
	}

	@if (!Expandable || Expanded)
	{
		@if (Title != null && !TitleInHeader)
		{
			<div class="pf-c-card__title">@Title</div>
		}
		@if (ChildContent != null)
		{
			<div class="pf-c-card__body">@ChildContent</div>
		}
		@BodySections
		@if (Footer != null)
		{
			<div class="pf-c-card__footer">@Footer</div>
		}
	}
</div>

@code {
	private string id = Guid.NewGuid().ToString();

	private bool _selected;
	private bool _expanded;

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public RenderFragment BodySections { get; set; }

	[Parameter]
	public RenderFragment Title { get; set; }

	[Parameter]
	public RenderFragment Footer { get; set; }

	[Parameter]
	public RenderFragment Header { get; set; }

	[Parameter]
	public RenderFragment Actions { get; set; }

	[Parameter]
	public bool TitleInHeader { get; set; }

	[Parameter]
	public bool Compact { get; set; }

	[Parameter]
	public bool Hoverable { get; set; }

	[Parameter]
	public bool Selectable { get; set; }

	[Parameter]
	public bool Selected
	{
		get { return _selected; }
		set
		{
			if (_selected == value) return;

			_selected = value;

			if (SelectedChanged.HasDelegate)
				SelectedChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public EventCallback<bool> SelectedChanged { get; set; }

	[Parameter]
	public bool Flat { get; set; }

	[Parameter]
	public bool Expandable { get; set; }

	[Parameter]
	public bool Expanded
	{
		get { return _expanded; }
		set
		{
			if (_expanded == value) return;

			_expanded = value;

			if (ExpandedChanged.HasDelegate)
				ExpandedChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public EventCallback<bool> ExpandedChanged { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object> AdditionalAttributes { get; set; }

	private void ToggleExpanded()
	{
		Expanded = !Expanded;
	}
}
