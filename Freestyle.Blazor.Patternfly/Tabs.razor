@inject IJSFunctions JSFunctions

@if (Vertical)
{
	<div class="pf-l-split @LayoutAdditionalCssClass">
		<div class="pf-l-split__item">
			<div @ref="tabsRef" class="pf-c-tabs @CssClassConstants.Vertical @(Box ? CssClassConstants.Box : String.Empty) @(Secondary ? CssClassConstants.Secondary : String.Empty) @(Fill ? CssClassConstants.Fill : String.Empty) @AdditionalCssClass" @attributes="AdditionalAttributes">
				<ul class="pf-c-tabs__list">
					@foreach (var item in Children.OrderBy(x => x.SortOrder))
					{
						<li @key="item.Id" class="pf-c-tabs__item @(item.Current ? CssClassConstants.Current : String.Empty)" @attributes="AdditionalAttributes">
							<button class="pf-c-tabs__link @(item.Current ? CssClassConstants.Current : String.Empty)" @onclick="() => SetCurrent(item)" @onclick:preventDefault="true" id="@item.Id">
								@if (!String.IsNullOrEmpty(item.IconCssClass))
								{
									<span class="pf-c-tabs__item-icon" aria-hidden="true">
										<i class="@item.IconCssClass"></i>
									</span>
								}
								<span class="pf-c-tabs__item-text">@item.Text</span>
							</button>
						</li>
					}
				</ul>
			</div>
		</div>
		<div class="pf-l-split__item pf-m-fill fspf-u-overflow-auto">
			<CascadingValue Name="Tabs" Value="this" IsFixed="true">
				@ChildContent
			</CascadingValue>
		</div>
	</div>
}
else
{
	<div class="pf-l-stack @LayoutAdditionalCssClass">
		<div class="pf-l-stack__item">
			<div @ref="tabsRef" class="pf-c-tabs @(Box ? CssClassConstants.Box : String.Empty) @(Secondary ? CssClassConstants.Secondary : String.Empty) @(Fill ? CssClassConstants.Fill : String.Empty) @AdditionalCssClass" @attributes="AdditionalAttributes">
				<button class="pf-c-tabs__scroll-button" disabled aria-label="Scroll left">
					<i class="fas fa-angle-left" aria-hidden="true"></i>
				</button>
				<ul class="pf-c-tabs__list">
					@foreach (var item in Children.OrderBy(x => x.SortOrder))
					{
						<li @key="item.Id" class="pf-c-tabs__item @(item.Current ? CssClassConstants.Current : String.Empty)" @attributes="AdditionalAttributes">
							<button class="pf-c-tabs__link @(item.Current ? CssClassConstants.Current : String.Empty)" @onclick="() => SetCurrent(item)" @onclick:preventDefault="true" id="@item.Id">
								@if (!String.IsNullOrEmpty(item.IconCssClass))
								{
									<span class="pf-c-tabs__item-icon" aria-hidden="true">
										<i class="@item.IconCssClass"></i>
									</span>
								}
								<span class="pf-c-tabs__item-text">@item.Text</span>
							</button>
						</li>
					}
				</ul>
				<button class="pf-c-tabs__scroll-button" disabled aria-label="Scroll right">
					<i class="fas fa-angle-right" aria-hidden="true"></i>
				</button>
			</div>
		</div>
		<div class="pf-l-stack__item pf-m-fill fspf-u-overflow-auto">
			<CascadingValue Name="Tabs" Value="this" IsFixed="true">
				@ChildContent
			</CascadingValue>
		</div>
	</div>
}

@code {
	private int _currentTabIndex;
	private List<TabsItem> _children = new List<TabsItem>();

	private ElementReference tabsRef;

	[Parameter]
	public bool Vertical { get; set; }

	[Parameter]
	public bool Box { get; set; }

	[Parameter]
	public bool Fill { get; set; }

	[Parameter]
	public bool Secondary { get; set; }

	[Parameter]
	public string LayoutAdditionalCssClass { get; set; }

	[Parameter]
	public string AdditionalCssClass { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object> AdditionalAttributes { get; set; }

	[Parameter]
	public TabsRenderMode RenderMode { get; set; } = TabsRenderMode.HideAferFirstRender;

	[Parameter]
	public int CurrentTabIndex
	{
		get { return _currentTabIndex; }
		set
		{
			if (value < 0) return;
			if (value == _currentTabIndex) return;
			if (value > _children.Count - 1) return;

			SetCurrent(_children.OrderBy(x => x.SortOrder).Skip(value).FirstOrDefault());
		}
	}

	[Parameter]
	public EventCallback<int> CurrentTabIndexChanged { get; set; }

	internal List<TabsItem> Children
	{
		get { return _children; }
	}

	internal void AddChild(TabsItem item)
	{
		if (_currentTabIndex == _children.Count())
			item.Current = true;
		else
			item.Current = false;

		_children.Add(item);
		_children = _children.OrderBy(x => x.SortOrder).ToList();

		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!Vertical)
		{
			await JSFunctions.BindTabsScrollerAsync(tabsRef);
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private void SetCurrent(TabsItem item)
	{
		foreach (var child in Children)
		{
			if (child != item)
			{
				child.Current = false;
			}
		}

		item.Current = true;

		_currentTabIndex = Children.IndexOf(item);
		CurrentTabIndexChanged.InvokeAsync(_currentTabIndex);
	}
}