<div class="pf-c-page @AdditionalCssClass">
	<header role="banner" class="pf-c-page__header">
		<div class="pf-c-page__header-brand @(SidebarEnabled ? String.Empty : "fspf-brand-toggle-hidden")">
			@if (Sidebar != null) {
				<div class="pf-c-page__header-brand-toggle">
					<button class="pf-c-button pf-m-plain" type="button" id="page-nav-toggle" aria-label="@SidebarToggleLabel" aria-expanded="@SidebarExpanded" aria-controls="page-primary-nav" @onclick="ToggleSidebar" disabled="@(!SidebarEnabled)">
						<i class="fas fa-bars" aria-hidden="true"></i>
					</button>
				</div>
			}
			<a class="pf-c-page__header-brand-link" href="@LogoHref">
				<img class="pf-c-brand" src="@LogoUrl" alt="@LogoAltText" />
			</a>
			@HeaderBrand
		</div>
		@if (HeaderNav != null)
		{
			<div class="pf-c-page__header-nav">@HeaderNav</div>
		}
		@if (HeaderTools != null)
		{
			<div class="pf-c-page__header-tools">@HeaderTools</div>
		}
	</header>
	@if (Sidebar != null && SidebarEnabled)
	{
		<div id="page-primary-nav" class="pf-c-page__sidebar pf-m-dark @(SidebarExpanded && SidebarEnabled ? CssClassConstants.Expanded : CssClassConstants.Collapsed)">
			<div class="pf-c-page__sidebar-body">@Sidebar</div>
		</div>
	}
	@if (Drawer != null)
	{
		<div class="pf-c-page__drawer">
			<Drawer DrawerPosition="DrawerPosition.Right" Inline="DrawerInline" @bind-Expanded="DrawerExpanded" NoPadding="DrawerNoPadding" ShowClose="DrawerShowClose" ShowHeader="DrawerShowHeader" DrawerPanelAdditionalCssClass="@DrawerPanelAdditionalCssClass">
				<DrawerHeaderContent>
					@DrawerHeader
				</DrawerHeaderContent>
				<DrawerContent>
					@Drawer
				</DrawerContent>
				<MainContent>
					@ChildContent
				</MainContent>
				<BeforeMain>
					@BeforeMain
				</BeforeMain>
			</Drawer>
		</div>
	}
	else
	{
		@BeforeMain
		<main role="main" class="pf-c-page__main @MainAdditionalCssClass" tabindex="-1">
			@ChildContent
		</main>
	}
</div>

@code {
	private bool _drawerExpanded;

	[Parameter]
	public RenderFragment HeaderBrand { get; set; }

	[Parameter]
	public RenderFragment HeaderNav { get; set; }

	[Parameter]
	public RenderFragment HeaderTools { get; set; }

	[Parameter]
	public RenderFragment Sidebar { get; set; }

	[Parameter]
	public RenderFragment DrawerHeader { get; set; }

	[Parameter]
	public bool DrawerShowHeader { get; set; } = true;

	[Parameter]
	public RenderFragment Drawer { get; set; }

	[Parameter]
	public RenderFragment BeforeMain { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public bool DrawerInline { get; set; }

	[Parameter]
	public bool DrawerExpanded
	{
		get { return _drawerExpanded; }
		set
		{
			if (value == _drawerExpanded) return;

			_drawerExpanded = value;

			if (DrawerExpandedChanged.HasDelegate)
				DrawerExpandedChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public EventCallback<bool> DrawerExpandedChanged { get; set; }

	[Parameter]
	public string DrawerPanelAdditionalCssClass { get; set; }

	[Parameter]
	public string SidebarToggleLabel { get; set; } = "Global navigation";

	[Parameter]
	public string LogoUrl { get; set; } = "/css/assets/images/PF-Masthead-Logo.svg";

	[Parameter]
	public string LogoAltText { get; set; }

	[Parameter]
	public string LogoHref { get; set; } = "/";

	[Parameter]
	public bool SidebarExpanded { get; set; } = true;

	[Parameter]
	public EventCallback<bool> SidebarExpandedChanged { get; set; }

	[Parameter]
	public bool SidebarEnabled { get; set; } = true;

	[Parameter]
	public bool DrawerNoPadding { get; set; }

	[Parameter]
	public bool DrawerShowClose { get; set; } = true;

	[Parameter]
	public string AdditionalCssClass { get; set; }

	[Parameter]
	public string MainAdditionalCssClass { get; set; }

	public async Task ToggleSidebar()
	{
		SidebarExpanded = !SidebarExpanded;

		await SidebarExpandedChanged.InvokeAsync(SidebarExpanded);

		StateHasChanged();
	}
}
