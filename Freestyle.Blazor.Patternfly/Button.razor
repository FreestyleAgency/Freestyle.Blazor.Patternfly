<button class="pf-c-button @(InInputGroup ? CssClassConstants.Control : String.Empty) @CssClassConstants.GetButtonStyleClass(ButtonStyle) @(Block ? CssClassConstants.Block : String.Empty) @(Size == ButtonSize.Large ? CssClassConstants.DisplayLarge : String.Empty) @(Size == ButtonSize.Small ? CssClassConstants.Small : String.Empty) @(ShowSpinner ? CssClassConstants.InProgress : String.Empty)" @attributes="AdditionalAttributes" disabled="@(!Enabled)" @onclick:preventDefault="OnClickPreventDefault" @onclick:stopPropagation="OnClickStopPropagation">
	@if (ShowSpinner)
	{
		<span class="pf-c-button__progress">
			<span class="pf-c-spinner pf-m-md" role="progressbar" aria-valuetext="Loading...">
				<span class="pf-c-spinner__clipper"></span>
				<span class="pf-c-spinner__lead-ball"></span>
				<span class="pf-c-spinner__tail-ball"></span>
			</span>
		</span>
	}
	@if (!String.IsNullOrEmpty(IconCssClass) && IconPosition == LeftRightHorizontalAlignment.Left)
	{
		if (ButtonStyle != ButtonStyle.Control)
		{
			<span class="pf-c-button__icon pf-m-start">
				<i class="@IconCssClass" aria-hidden="true"></i>
			</span>
		}
		else
		{
			<i class="@IconCssClass" aria-hidden="true"></i>
		}
	}
	@Text
	@if (!String.IsNullOrEmpty(IconCssClass) && IconPosition == LeftRightHorizontalAlignment.Right)
	{
		if (ButtonStyle != ButtonStyle.Control)
		{
			<span class="pf-c-button__icon pf-m-end">
				<i class="@IconCssClass" aria-hidden="true"></i>
			</span>
		}
		else
		{
			<i class="@IconCssClass" aria-hidden="true"></i>
		}
	}
</button>

@code {
	[Parameter]
	public bool ShowSpinner { get; set; }

	[Parameter]
	public bool AutoLoadingState { get; set; } = true;

	[Parameter]
	public ButtonStyle ButtonStyle { get; set; } = ButtonStyle.Primary;

	[Parameter]
	public string Text { get; set; }

	[Parameter]
	public string IconCssClass { get; set; }

	[Parameter]
	public LeftRightHorizontalAlignment IconPosition { get; set; } = LeftRightHorizontalAlignment.Left;

	[Parameter]
	public bool Enabled { get; set; } = true;

	[Parameter]
	public bool Block { get; set; }

	[Parameter]
	public ButtonSize Size { get; set; }

	[Parameter]
	public bool OnClickPreventDefault { get; set; }

	[Parameter]
	public bool OnClickStopPropagation { get; set; }

	[CascadingParameter]
	internal bool InInputGroup { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object> AdditionalAttributes { get; set; }

	[CascadingParameter(Name = "PFEditForm")]
	internal PFEditForm PFEditForm { get; set; }

	protected override void OnParametersSet()
	{
		if (PFEditForm != null)
			PFEditForm.AddButton(this);

		base.OnParametersSet();
	}

	internal void SetLoadingState(bool loading)
	{
		if (AutoLoadingState)
		{
			ShowSpinner = loading;
			Enabled = !loading;

			StateHasChanged();
		}
	}
}
