@typeparam TValue

<div class="pf-c-radio">
	@if (RadioAlignment == LeftRightHorizontalAlignment.Left)
	{
		<InputRadio Name="@Name" Value="Value" class="@($"pf-c-radio__input {AdditionalCssClass}")" id="@id" disabled="@(!Enabled)" @attributes="AdditionalAttributes" />
	}
	<label class="pf-c-radio__label @(Enabled ? String.Empty : CssClassConstants.Disabled)" for="@id">@Label</label>
	@if (RadioAlignment == LeftRightHorizontalAlignment.Right)
	{
		<InputRadio Name="@Name" Value="Value" class="@($"pf-c-radio__input {AdditionalCssClass}")" id="@id" disabled="@(!Enabled)" @attributes="AdditionalAttributes" />
	}
	@if (!String.IsNullOrWhiteSpace(Description))
	{
		<div class="pf-c-radio__description">@Description</div>
	}
</div>

@code {
	private string id = Guid.NewGuid().ToString();

	/// <summary>
	/// Gets or sets a collection of additional attributes that will be applied to the input element.
	/// </summary>
	[Parameter(CaptureUnmatchedValues = true)]
	public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

	/// <summary>
	/// Gets or sets the value of this input.
	/// </summary>
	[Parameter]
	public TValue? Value { get; set; }

	/// <summary>
	/// Gets or sets the name of the parent input radio group.
	/// </summary>
	[Parameter]
	public string? Name { get; set; }

	[Parameter]
	public string Label { get; set; }

	[Parameter]
	public string Description { get; set; }

	[Parameter]
	public bool Enabled { get; set; } = true;

	[Parameter]
	public string AdditionalCssClass { get; set; }

	[Parameter]
	public LeftRightHorizontalAlignment RadioAlignment { get; set; } = LeftRightHorizontalAlignment.Left;
}
