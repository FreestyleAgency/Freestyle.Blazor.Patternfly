@if (Tabs != null)
{
	@if ((Tabs.RenderMode == TabsRenderMode.RerenderAlways && Current) || (Tabs.RenderMode == TabsRenderMode.HideAlways) || (Tabs.RenderMode == TabsRenderMode.HideAferFirstRender && (Current || hasRendered)))
	{
		<section class="pf-c-tab-content @AdditionalCssClass" role="tabpanel" tabindex="0" aria-labelledby="@Id" hidden="@(!Current)">
			@ChildContent
		</section>
	}
}

@code {
	private bool _current = false;

	private bool hasRendered = false;

	internal string Id { get; set; } = Guid.NewGuid().ToString();

	[Parameter]
	public string Text { get; set; }

	[Parameter]
	public string IconCssClass { get; set; }

	[Parameter]
	public string AdditionalCssClass { get; set; }

	[Parameter]
	public int SortOrder { get; set; }

	internal bool Current { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[CascadingParameter(Name = "Tabs")]
	public Tabs Tabs { get; set; }

	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object> AdditionalAttributes { get; set; }

	protected override void OnInitialized()
	{
		if (Tabs == null)
			throw new InvalidOperationException("TabsItem must be nested in a Tabs component.");

		Tabs.AddChild(this);

		base.OnInitialized();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (Current) hasRendered = true;

		await base.OnAfterRenderAsync(firstRender);
	}
}